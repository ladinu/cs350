Question 1
_______________________________________________________________________________

I wrote the following Python program to generate graphs from a given adjacency
matrix (it uses dot to generate graphs). 

      #!/usr/bin/env python
      import pydot as dot

      def genGraph(matrix):
         graph = dot.Dot(graph_type='digraph')
         nodes = []
         for row_idx, row in enumerate(matrix):
            node = dot.Node("%i" % row_idx)
            graph.add_node(node)
            nodes.append(node)

         for row_idx, row in enumerate(matrix):
            for column_idx, element in enumerate(row):
               if element:
                  graph.add_edge(dot.Edge(nodes[row_idx], nodes[column_idx]))

         graph.write_png("out.png")

I noticed the following patterns when generating graphs for the given network
topologies (star, ring, all connected)

   star
      - All nodes are connected to a single node and none of the nodes has a
        loop on itself.

      - The matrix would have to have all ones in its first row and first
        column expect for the very first element. For example, It would look
        like this for a 3 by 3 matrix

              [0, 1, 1]
              [1, 0, 0]
              [1, 0, 0]
               
        and like this for a n by n matrix:

              [0, 1, 1, ..., 1]
              [1, 0, 0, ..., 0]
              [1, 0, 0, ..., 0]
              [., 0, 0, ..., 0]
              [., 0, 0, ..., 0]
              [., 0, 0, ..., 0]
              [1, 0, 0, ..., 0]

      - Essentally, algorithm would have to check if the first row and column
        contain all 1s (execpt for the first element) and the rest are 0s.

      - This is the bruteforce algorithm that check if a n by n adjacency
        matrix represent a star network:

             if A[1, 1] = 1 then return false
             for i=2 to n do
                if A[1, i] \= 1 then return false
                if A[i, 1] \= 1 then return false
                for j=2 to n do
                  if A[i, j] \= 0 then return false 
             return true

      - The time effciency of this algorithm O(n^2). This is beacuse the
        algorithm has 2 for loops and the second for loop is nested inside the
        first. 

   ring
      - In this type of network, the first node is connected to the second node
        and second node is connected to the third node and so on until last
        node is connected to the first node.

      - The adjacency matrix representation of this graph look like this for a
        3 by 3 matrix,

              [0, 1, 0]
              [0, 0, 1]
              [1, 0, 0]

        like this for a 4 by 4 matrix, 

              [0, 1, 0, 0]
              [0, 0, 1, 0]
              [0, 0, 0, 1]
              [1, 0, 0, 0]

        this pattern continues on for a n by n matrix

      - The following algorithm that check for a ring network. It check if all
        elements are 0 execpt for first element of the last row and each i+1
        element in i'th row.

            for i=1 to n do
               for j=1 to n do
                  if j == ((i+1) % n) then 
                     if A[i, j] \= 1 then return false
                  else
                     if A[i, j] \= 0 then return false
            return true

      - The time effciency of this algorithm is clearly O(n^2). The algorithm
        has two for loops, one nested inside the other. There are 2 basic
        operations (comparision) for each iteration. This operation is executed
        2n^2 times. Hence the algorithm is O(n^2)

   all connected
      - As name implies, all the nodes are connected to each other. Each node
        will have n incomming edges. Beacuse none of the nodes are connected to
        itself, the diagonal of the adjacency matrix will all be 0s.

      - Beacuse all nodes are connected (execpt node to itself), the adjacency
        matrix will be filled with 1s execpt for the diagnoals. Matrix look
        like this for a 4 by 4 matrix
                     
             [0, 1, 1, 1]
             [1, 0, 1, 1]
             [1, 1, 0, 1]
             [1, 1, 1, 0]
              

      - The algorithm for checking if all alements of the adjacency matrix are
        1s execpt for the diagnoals is the following

            for i=1 to n do
               for j=1 to n do
                  if j == i then
                     if A[i, j] \= 0 then return false
                  else
                     if A[i, j] \= 1 then reutrn false
            return true

      - The time effciency for this algorithm, like before, is O(n^2). The
        comparision operation get exectued twice for each iteration and there
        are n^2 iterations. This mean the basic operation get executed 2n^2
        times. Thus the algorithm is O(n^2).

By combining all the algorithms given above, the following algorithm check if a
given n by n adjacency matrix represnt a star, ring or all connetcted network
toplogy

   // Input: A matrix A[1...n, 1...n] of booleans (1 or 0)
   // Output: Type of the network toplogy STAR, RING, ALL_CONNECTED, UNKNOWN
   function TOPOLOGY_TYPE( A[1...n, 1..n] )

      subroutine IS_STAR:
         if A[1, 1] = 1 then return false
         for i=2 to n do
            if A[1, i] \= 1 then return false
            if A[i, 1] \= 1 then return false
            for j=2 to n do
               if A[i, j] \= 0 then return false 
         return true 

      subroutine IS_RING:
         for i=1 to n do
            for j=1 to n do
               if j == ((i+1) % n) then 
                  if A[i, j] \= 1 then return false
               else
                  if A[i, j] \= 0 then return false
         return true


      subroutine IS_ALL_CONNECTED:
         for i=1 to n do
            for j=1 to n do
               if j == i then
                  if A[i, j] \= 0 then return false
               else
                  if A[i, j] \= 1 then reutrn false
            return true

      if IS_STAR then
         return STAR
      else if IS_RING then
         return RING
      else if IS_ALL_CONNECTED then
         return ALL_CONNECTED
      else
         return UNKNOWN

   - The worst case time effciency for TOPOLOGY_TYPE is going to be the sum of
     worst case time effciency of all the sub routines. This total is about
     3n^2. So the worst case time effciency for TOPOLOGY_TYPE is also O(n^2).

Question 2
_______________________________________________________________________________


Question 3
_______________________________________________________________________________

(note: for this question I'm assuming that 'comparison' mean key comparisons
and not l <= r comparison)

(a) False. The first comparison will be made against A[5]

(b) The largest number of comparisons required to find any element in the list
    is 4 comparisons.

(c) Values 13, 28, 57, 92 and 97 require the largest number of comparisons.

(d) 4 comparisons will be made before it can conclude element 58 does not exist



Question 4
_______________________________________________________________________________

- Average case depend on the type of input. For this problem, I will assume the
  input is uniformly distributed.

- Beacuse average case time effciency of sequential search is O(n), on average
  it will take about 19000 comparisons to find a key. This number is obtained
  by summing all the comparision needed for finding each element in 38000
  element list and dividing them by 38000.

- The average case for binary seach is log2(n). log2(38000) = 15.2 ~= 16 

- Now 19000 / 16 = 1187.5 ~= 1188. So binary search is 1188 times faster than
  sequential search in the average case.

Question 5
_______________________________________________________________________________

- This is my implementation of Johnson-Trotter algorithm in Python:

      #!/usr/bin/env python
      from sys import argv

      LEFT = 'left'
      RIGHT = 'right'

      class Element:
         def __init__(self, value, direction):
            self.value = value;
            self.direction = direction

         def __repr__(self):
            direction = ''
            if self.direction == LEFT:
               direction = "<-"
            else:
               direction = "->"
            return "{%i %s}" % (self.value, direction)

         def reverseDirection(self):
            if self.direction == LEFT:
               self.direction = RIGHT
            else:
               self.direction = LEFT

      class Permutation:
         def __init__(self):
            self.array = []
            self.length = 0

         def __repr__(self):
            ret = "[ "
            for i in self.array:
               ret += str(i)
               ret += " "
            return ret + "]"

         def push(self, element):
            self.array.append(element)
            self.length += 1
            assert self.length == len(self.array)

         def get(self, index):
            return self.array[index]


         def pushTo(self, targetArray):
            elements = ''
            for i in self.array:
               elements += str(i.value)
            targetArray.append(elements)

         def toInt(self):
            elements = ''
            for i in self.array:
               elements += str(i.value)
            return int(elements)

         # Check if elemnt at given index is mobile by seeing if the
         # element that its pointing to is smaller. Will return a boolean
         def isMobile(self, index):
            element = self.array[index]
            adjElement_index = index

            if element.direction == LEFT:
               adjElement_index = index - 1
            else:
               adjElement_index = index + 1

            # If the arrow point off index, by definition
            # the element is not mobile
            if (adjElement_index < 0) or (adjElement_index >= self.length):
               return False

            adjElement = self.array[adjElement_index]

            # Current element is only mobile if its bigger than the 
            # elemnt that it is pointing to
            return element.value > adjElement.value

         def hasMobileElement(self):
            for index, element in enumerate(self.array):
               if self.isMobile(index):
                  return True
            return False

         # Does a linear search through the internal array to find
         # the largest mobile element. If such element was found
         # the index will be returned, else -1 will be reutned
         def largestMobile(self):
            if self.length < 2:
               return -1

            largestElement = Element(-1, LEFT)
            largestElementIndex = -1

            for index, element in enumerate(self.array):
               if self.isMobile(index):
                  if element.value > largestElement.value:
                     largestElement = element
                     largestElementIndex = index

            return largestElementIndex

         def swap(self, i, j):
            arr = self.array
            arr[i], arr[j] = arr[j], arr[i]

         def reverseElements(self, k):
            element = self.array[k]
            for i in self.array:
               if i.value > element.value:
                  i.reverseDirection()


      # Convert a given number to a list of elements
      # Each element has a value and a direction where
      # the arrow point to. Initially, they will all
      # point to the left 
      def init_perm(n):
         permutation = Permutation()
         i = 0
         while i < n:
            permutation.push(Element(i+1, LEFT))
            i += 1

         return permutation


      def johnsonTrotterPrint(n):
         lastPermutaion = init_perm(n)
         print lastPermutaion.toInt()

         while lastPermutaion.hasMobileElement():
            lastPermutaion = johnsonTrotterCore(lastPermutaion)
            if not lastPermutaion:
               break
            print lastPermutaion.toInt()

      def johnsonTrotter(n):
         permutationList = []
         lastPermutaion = init_perm(n)
         lastPermutaion.pushTo(permutationList)

         while lastPermutaion.hasMobileElement():
            lastPermutaion = johnsonTrotterCore(lastPermutaion)
            if not lastPermutaion:
               break
            lastPermutaion.pushTo(permutationList)

         return permutationList

      def johnsonTrotterCore(permutation):
            # Find index of largest mobile element
            k = permutation.largestMobile()
            if k < 0:
               return False
            # Swap largest mobile with its adjacent 
            # element pointed by the arrow
            element = permutation.get(k)
            adjElement_index = k

            if element.direction == LEFT:
               adjElement_index = k - 1
            else:
               adjElement_index = k + 1

            permutation.swap(k, adjElement_index)
            # We just swapped this, so index must change
            k = adjElement_index

            # Reverse the direction of all alements that are
            # larger than k
            permutation.reverseElements(k)
            return permutation

      if __name__ == '__main__':
         johnsonTrotterPrint(int(argv[1]))

- See Appedndix A for the unittests for the abouve program. Also see appendix B
  for the results of the unittests.

- For the tests that check (a) no duplicate permutations are generated and (b)
  exactly n! permutations are generated, I used the following bash script:

   
      #!/bin/bash

      function Error() {
         echo "ERROR: $1";
      }

      function Info() {
         echo "> $1";
      }

      function hasDuplicates() {
         duplicateCount=`sort $1 | uniq -d | wc -l |tr -d ' '`;
         if [ "0" = $duplicateCount ]; then
            echo "NO";
         else
            echo "YES";
         fi
      }

      function checkForDuplicates() {
         for i in `seq 1 10`; do
            status=`hasDuplicates perms/$i.txt`
            if [ $status = "YES" ]; then
               Error "File perms/$i.txt contain duplicate permutations";
            else
               Info "File perms/$i.txt contain no duplicate permutations";
            fi
         done
      }

      function fac() {
         echo "define f(x) {if (x>1){return x*f(x-1)};return 1}
                 f($1)" | bc
      }

      function checkNFactorial() {
         for i in `seq 1 10`; do
            if [ `wc -l < perms/$i.txt |tr -d ' '` != `fac $i` ]; then
               Error "perms/$i.txt does not contain `fac $i` permutations";
            else
               Info "perms/$i.txt contain `fac $i` permutations";
            fi
         done
      }

      function generateTestFiles() {
         if [ ! -d "./perms" ]; then
            mkdir "./perms";
         fi

         for i in `seq 1 10`; do
            Info "Generating permutation file $i.txt";
            python permute.py $i > "perms/$i.txt";
         done
      }

      function main() {
         generateTestFiles
         checkForDuplicates
         checkNFactorial
      }
      main

- The above bash script is expected to run in the same diredectory as the
  python program. The bash script first execute the python program and generate
  ten text files that contain permutations of 1, 2, 3, ..., 10 in the perms/
  directory. 

- The bash script use UNIX tools sort, uniq, wc and others to check that the
  generated permutation files contain no duplicate permutations (i.e no
  duplicate lines)

- The script also check that there are n! number of lines for each file in
  perms/ directory

- Following is the output of running the bash test script agains the python
  program 

        hw3 git:(master) ✗ ./test.sh
         > Generating permutation file 1.txt
         > Generating permutation file 2.txt
         > Generating permutation file 3.txt
         > Generating permutation file 4.txt
         > Generating permutation file 5.txt
         > Generating permutation file 6.txt
         > Generating permutation file 7.txt
         > Generating permutation file 8.txt
         > Generating permutation file 9.txt
         > Generating permutation file 10.txt
         > File perms/1.txt contain no duplicate permutations
         > File perms/2.txt contain no duplicate permutations
         > File perms/3.txt contain no duplicate permutations
         > File perms/4.txt contain no duplicate permutations
         > File perms/5.txt contain no duplicate permutations
         > File perms/6.txt contain no duplicate permutations
         > File perms/7.txt contain no duplicate permutations
         > File perms/8.txt contain no duplicate permutations
         > File perms/9.txt contain no duplicate permutations
         > File perms/10.txt contain no duplicate permutations
         > perms/1.txt contain 1 permutations
         > perms/2.txt contain 2 permutations
         > perms/3.txt contain 6 permutations
         > perms/4.txt contain 24 permutations
         > perms/5.txt contain 120 permutations
         > perms/6.txt contain 720 permutations
         > perms/7.txt contain 5040 permutations
         > perms/8.txt contain 40320 permutations
         > perms/9.txt contain 362880 permutations
         > perms/10.txt contain 3628800 permutations

Question 6
_______________________________________________________________________________

(a) The following is an algorithm that find the largest key in a binary search
    tree. For the algorithm, I'm assuming the largest value is always on the
    right side of the tree 

         // Input: Pointer to the root of the binary tree
         // Output: The largest key in the binary tree
         function FIND_LARGEST_KEY(root)
            currentNode = root

            while currentNode.right exist:
               currentNode = currentNode.right

            return currentNode.value

(b) Yes. In each iteration, search space is halved

(c) On the average case the time effciency is O(h) where h is the height of the
    tree. This is beacuse the algorithm has to always travel to the right most
    end of the tree to find the largest element.

(d) O(h) where h is the height of the tree. The worst case is also the average
    case beacuse the algorithm must travel all the right nodes. 


[ Appendix A ]
-------------------------------------------------------------------------------

      import unittest
      from johnsonTrotter import *

      class JohnsonTrotter(unittest.TestCase):

         def test_empty_Permutation(self):
            pl = Permutation()
            self.assertEqual(pl.array, [])
            self.assertEqual(pl.length, 0)

         def test_Permutation_push(self):
            pl = Permutation()
            self.assertEqual(pl.array, [])
            self.assertEqual(pl.length, 0)
            pl.push(Element(1, LEFT))
            self.assertEqual(pl.length, 1)

         def test_Permutation_isMobile_1(self):
            pl = Permutation()
            pl.push(Element(1, LEFT))
            self.assertFalse(pl.isMobile(0))

         def test_Permutation_isMobile_2(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            self.assertFalse(pl.isMobile(0))

         def test_Permutation_isMobile_3(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, LEFT))
            self.assertTrue(pl.isMobile(1))

         def test_Permutation_isMobile_4(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, RIGHT))
            self.assertFalse(pl.isMobile(1))

         def test_Permutation_largestMobile_empty(self):
            pl = Permutation()
            lm = pl.largestMobile()
            self.assertEqual(lm, -1)

         def test_Permutation_largestMobile_1(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            lm = pl.largestMobile()
            self.assertEqual(lm, -1)

         def test_Permutation_largestMobile_2(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, RIGHT))
            self.assertEqual(pl.largestMobile(), -1)

         def test_Permutation_swap(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, RIGHT))

            self.assertEqual(pl.get(1).value, 2)
            pl.swap(0, 1)
            self.assertEqual(pl.get(1).value, 1)

         def test_Permutation_reverse(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, RIGHT))
            pl.reverseElements(0)
            self.assertEqual(pl.get(1).direction, LEFT)

         def test_Permutation_hasMobileElement(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            pl.push(Element(2, LEFT))
            self.assertTrue(pl.hasMobileElement())
            pl.get(1).reverseDirection()
            self.assertFalse(pl.hasMobileElement())

         def test_Permutation_get(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            self.assertEqual(pl.get(0).value, 1)

         def test_Permutation_pushTo_empty(self):
            pl = Permutation()
            perms = []
            pl.pushTo(perms)
            self.assertEqual(perms[0], '')

         def test_Permutation_pushTo_1(self):
            pl = Permutation()
            pl.push(Element(1, RIGHT))
            perms = []
            pl.pushTo(perms)
            self.assertEqual(len(perms), 1)
            self.assertEqual(perms[0], '1')

         def test_Permutation_pushTo_2(self):
            pl = Permutation()
            perms = []
            pl.push(Element(1, RIGHT))
            pl.pushTo(perms)
            pl.push(Element(2, LEFT))
            pl.pushTo(perms)
            self.assertEqual(len(perms), 2)

            self.assertEqual(perms[0], '1')
            self.assertEqual(perms[1], '12')

         def test_Element(self):
            e = Element(1, LEFT)
            self.assertEqual(e.value, 1)
            e = Element(1, RIGHT)
            self.assertEqual(e.direction, RIGHT)

         def test_Element_reverse(self):
            e = Element(1, RIGHT)
            self.assertEqual(e.direction, RIGHT)
            e.reverseDirection()
            self.assertEqual(e.direction, LEFT)

         def test_initPerm_empty(self):
            pl = init_perm(0)
            self.assertEqual(pl.length, 0)

         def test_initPerm_one(self):
            pl = init_perm(1)
            self.assertEqual(pl.length, 1)

         def test_initPerm_two(self):
            pl = init_perm(2)
            self.assertEqual(pl.length, 2)

         def test_JohnsonTrotter_empty(self):
            permutations = johnsonTrotter(0)
            self.assertEqual(permutations, [''])
            permutations = johnsonTrotter(-1)
            self.assertEqual(permutations, [''])

         def test_JohnsonTrotter_1(self):
            permutations = johnsonTrotter(1)
            self.assertEqual(len(permutations), 1)

         def test_JohnsonTrotter_2(self):
            permutations = johnsonTrotter(2)
            self.assertEqual(len(permutations), 2)

         def test_JohnsonTrotter_3(self):
            permutations = johnsonTrotter(3)
            self.assertEqual(len(permutations), 6)

      if __name__ == '__main__':
          unittest.main()

[ Appendix B ]
-------------------------------------------------------------------------------

      python johnsonTrotter_test.py
      .........................
      ----------------------------------------------------------------------
      Ran 25 tests in 0.002s

      OK
